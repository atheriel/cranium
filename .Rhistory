z
install.packages('crane')
install.packages('cranium')
class(z)
z
z[,.(Package)]
z[,.(Package, License)]
z[,.(Package, License, Maintainer)]
[3:18 PM]
library(RODBC)
odbcDataSources()
{
cn <- odbcDriverConnect(
connection="Driver={FreeTDS};
server=hq-dev-bidb-01;
database=PinnacleDW;
trusted_connection=yes;"
)
on.exit(odbcClose(cn))
readData <- sqlFetch(cn,'base.Countries')
summary(readData)
}
{
cn <- odbcDriverConnect(
connection="Driver={FreeTDS};
server=172.24.13.60;
database=PinnacleDW;
trusted_connection=yes;"
)
on.exit(odbcClose(cn))
readData <- sqlFetch(cn,'base.Countries')
summary(readData)
}
{
cn <- odbcDriverConnect(
connection="Driver={FreeTDS};
server=172.24.13.60:1433;
database=PinnacleDW;
trusted_connection=yes;"
)
on.exit(odbcClose(cn))
readData <- sqlFetch(cn,'base.Countries')
summary(readData)
}
dcfdescs
z <- extractAllDesc()
z
addLocalPackages(c('~/Downloads/RODBC_1.3-14.tar.gz'), 'CRAN_breeze','http://dashboard.pinnaclesports.com/repo')
pkgsAvailable()
pkgsAvailable('CRAN_breeze/')
getOption('repos')
x <- 'pinnacle.API'
utils::download.packages(x, destdir = tempdir())
utils:::getDependencies('pinnacle.API')
utils:::getDependencies(pinnacle.API)
utils:::getDependencies
utils:::getDependencies('/var/folders/_t/dqm9qq_n4ln497cvt4nlxlqh0000gn/T//Rtmptk23b2/pinnacle.API_1.92.tar.gz')
utils::packageDescription('/var/folders/_t/dqm9qq_n4ln497cvt4nlxlqh0000gn/T//Rtmptk23b2/pinnacle.API_1.92.tar.gz')
extractDesc <- function(x) {
tmp <-
Map(function(tarfile, exdir) {
untar(
tarfile = tarfile,
files = sprintf('%s/DESCRIPTION',extractPac(tarfile)),
exdir = exdir
)}
,tarfile = x
,exdir = file.path(tempdir(), 'DESC', x)
)
}
extractDesc('/var/folders/_t/dqm9qq_n4ln497cvt4nlxlqh0000gn/T//Rtmptk23b2/pinnacle.API_1.92.tar.gz')
extractDesc <- function(x) {
tmp <-
Map(function(tarfile, exdir) {
untar(
tarfile = tarfile,
files = sprintf('%s/DESCRIPTION',extractPac(tarfile)),
exdir = exdir
)}
,tarfile = x
,exdir = file.path(tempdir(), 'DESC', x)
)
DESCfiles <-
list.files(file.path(tempdir(), 'DESC', noEXT(pacs)),
recursive = TRUE,
full.names = TRUE,
include.dirs = FALSE)
# Bind them together to get directory
out <-
data.table::rbindlist(
lapply(DESCfiles,
function(file)
data.frame(read.dcf(file, fields = NULL))),
fill = TRUE)
out
}
extractDesc <- function(x) {
noEXT <- function(x) {
gsub('(^.*_[0-9]+.*?)\\.tar\\.gz$', '\\1', basename(x))
}
tmp <-
Map(function(tarfile, exdir) {
untar(
tarfile = tarfile,
files = sprintf('%s/DESCRIPTION',extractPac(tarfile)),
exdir = exdir
)}
,tarfile = x
,exdir = file.path(tempdir(), 'DESC', noEXT(x))
)
DESCfiles <-
list.files(file.path(tempdir(), 'DESC', noEXT(pacs)),
recursive = TRUE,
full.names = TRUE,
include.dirs = FALSE)
# Bind them together to get directory
out <-
data.table::rbindlist(
lapply(DESCfiles,
function(file)
data.frame(read.dcf(file, fields = NULL))),
fill = TRUE)
out
}
extractDesc('/var/folders/_t/dqm9qq_n4ln497cvt4nlxlqh0000gn/T//Rtmptk23b2/pinnacle.API_1.92.tar.gz')
extractDesc <- function(x) {
noEXT <- function(x) {
gsub('(^.*_[0-9]+.*?)\\.tar\\.gz$', '\\1', basename(x))
}
tmp <-
Map(function(tarfile, exdir) {
untar(
tarfile = tarfile,
files = sprintf('%s/DESCRIPTION',extractPac(tarfile)),
exdir = exdir
)}
,tarfile = x
,exdir = file.path(tempdir(), 'DESC', noEXT(x))
)
DESCfiles <-
list.files(file.path(tempdir(), 'DESC', noEXT(x)),
recursive = TRUE,
full.names = TRUE,
include.dirs = FALSE)
# Bind them together to get directory
out <-
data.table::rbindlist(
lapply(DESCfiles,
function(file)
data.frame(read.dcf(file, fields = NULL))),
fill = TRUE)
out
}
extractDesc('/var/folders/_t/dqm9qq_n4ln497cvt4nlxlqh0000gn/T//Rtmptk23b2/pinnacle.API_1.92.tar.gz')
SetVisibleLocation <- function(x) .cranium$location <- x
GetVisibleLocation <- function(x) .cranium$location
SetRepoLocation <- function(x) .cranium$repo <- x
GetRepoLocation <- function(x) .cranium$repo
library(utils)
library(tools)
.cranium <- new.env(hash = TRUE)
.cranium$packageFields <- c("Package", "Version", "Priority", "Depends", "Imports",
"LinkingTo", "Suggests", "Enhances", "License", "License_is_FOSS",
"License_restricts_use", "OS_type", "Archs", "MD5sum", "NeedsCompilation",
"Path")
.cranium$location <- 'file:///Users/hq-nb-nicholasj/Projects/repoR/'
.cranium$repo <- 'CRAN_breeze/'
SetVisibleLocation <- function(x) .cranium$location <- x
GetVisibleLocation <- function(x) .cranium$location
SetRepoLocation <- function(x) .cranium$repo <- x
GetRepoLocation <- function(x) .cranium$repo
GetRepoLocation()
SetRepoLocation(tempdir())
GetRepoLocation()
library(utils)
library(tools)
.cranium <- new.env(hash = TRUE)
.cranium$packageFields <- c("Package", "Version", "Priority", "Depends", "Imports",
"LinkingTo", "Suggests", "Enhances", "License", "License_is_FOSS",
"License_restricts_use", "OS_type", "Archs", "MD5sum", "NeedsCompilation",
"Path")
.cranium$location <- 'file:///Users/hq-nb-nicholasj/Projects/repoR/'
.cranium$repo <- 'CRAN_breeze/'
SetVisibleLocation <- function(x) .cranium$location <- x
GetVisibleLocation <- function(x) .cranium$location
SetRepoLocation <- function(x) .cranium$repo <- x
GetRepoLocation <- function(x) .cranium$repo
extractPac
GetVisibleLocation()
get_repo_location()
library(utils)
library(tools)
.cranium <- new.env(hash = TRUE)
.cranium[['package_fields']] <- c("Package", "Version", "Priority", "Depends", "Imports",
"LinkingTo", "Suggests", "Enhances", "License", "License_is_FOSS",
"License_restricts_use", "OS_type", "Archs", "MD5sum", "NeedsCompilation",
"Path")
.cranium[['location']] <- 'file:///Users/hq-nb-nicholasj/Projects/repoR/'
.cranium[['repo']] <- 'CRAN_breeze/'
library(utils)
library(tools)
.cranium <- new.env(hash = TRUE)
.cranium[['package_fields']] <- c("Package", "Version", "Priority", "Depends", "Imports",
"LinkingTo", "Suggests", "Enhances", "License", "License_is_FOSS",
"License_restricts_use", "OS_type", "Archs", "MD5sum", "NeedsCompilation",
"Path")
.cranium[['location']] <- 'file:///Users/hq-nb-nicholasj/Projects/repoR/'
.cranium[['repo']] <- 'CRAN_breeze/'
set_visible_location <- function(x) .cranium[['location']] <- x
get_visible_location <- function(x) .cranium[['location']]
set_repo_location <- function(x) .cranium[['repo']] <- x
get_repo_location <- function(x) .cranium[['repo']]
source('~/Projects/repoR/R/loadCRAN.R')
addLocalPackages(c('~/Downloads/RODBC_1.3-14.tar.gz'),
'CRAN_breeze','http://dashboard.pinnaclesports.com/repo')
add_local_packages(c('~/Downloads/RODBC_1.3-14.tar.gz'),
'CRAN_breeze','http://dashboard.pinnaclesports.com/repo')
source('~/Projects/repoR/R/loadCRAN.R')
add_local_packages <- function(pkgs,
repo = get_repo_location(),
www = get_visible_location()) {
# Check if version in repo
# if so remove it
browser()
contriburl <- utils::contrib.url(repo)
pacname <- gsub('(^.*)_[0-9]+.*?\\.tar\\.gz$', '\\1', basename(x))
newNames <- sprintf('%s/src/contrib/%s', repo, basename(x))
file.copy(x, newNames)
write_modpac(loc = www)
}
source('~/Projects/repoR/R/loadCRAN.R')
pkgs
repo
www
.cranium$location
get_visible_location()
add_local_packages(c('~/Downloads/RODBC_1.3-14.tar.gz'),
'CRAN_breeze')
contriburl <- utils::contrib.url(repo)
pacname <- gsub('(^.*)_[0-9]+.*?\\.tar\\.gz$', '\\1', basename(x))
newNames <- sprintf('%s/src/contrib/%s', repo, basename(x))
newNames
file.copy(x, newNames)
x
newNames
pkgs
pacname <- gsub('(^.*)_[0-9]+.*?\\.tar\\.gz$', '\\1', basename(pkgs))
newNames <- sprintf('%s/src/contrib/%s', repo, basename(pkgs))
file.copy(pkgs, newNames)
pkgs
newNames
getwd()
file.copy('~/Downloads/RODBC2_1.3-14.tar.gz','CRAN_breeze/src/contrib/RODBC_1.3-14.tar.gz')
file.copy('~/Downloads/RODBC2_1.3-14.tar.gz','CRAN_breeze/src/contrib/RODBC2_1.3-14.tar.gz')
file.copy(pkgs, newNames, overwrite = TRUE)
source('~/Projects/repoR/R/loadCRAN.R')
source('~/Projects/repoR/R/loadCRAN.R')
repo
loc
get_repo_location()
.cranium$repo
get_repo_location()
source('~/Projects/repoR/R/loadCRAN.R')
repo
out <- file(sprintf('%s/%s',contrib.url(repo), "PACKAGES"), "wt")
outgz <- gzfile(sprintf('%s/%s',contrib.url(repo), "PACKAGES.gz"), "wt")
DESCs <- repo_descriptions(repo)
cranDESCs <- DESCs[,mget(.cranium[['package_fields']], ifnotfound = NA)]
cranDESCs <- cranDESCs[,if(.N > 1) rbind(.SD,.SD[is_max_ver(Version)]) else .SD,
by = Package]
# Define the newest as the
cranDESCs[,IsNewest := (.N == frank(ifelse(is_max_ver(Version), 1, 0),
ties.method = 'first')),
by = Package]
cranDESCs[,IsHardLink := !is_shortest_string(Path),
by = .(Package, Version)]
cranDESCs <- cranDESCs[(!IsHardLink)]
cranDESCs[(!IsNewest), Package := interaction(Package, Version, sep = '_')]
cranDESCs[(!IsNewest), HardLinkLocation := hardlink_name(Path, Version)]
# in order to deal with download.packages,
# make hard links to the resulting packages
# that are created by it's frankenstein string op
Linkable <- cranDESCs[(!IsNewest & !file.exists(HardLinkLocation))]
if(nrow(Linkable) > 0) Linkable[,Map(file.link, Path, HardLinkLocation)]
# Clean Up before conversion to matrix
cranDESCs[,IsNewest := NULL]
cranDESCs[,HardLinkLocation := NULL]
cranDESCs[,IsHardLink := NULL]
# License data
license_info <- tools:::analyze_licenses(cranDESCs$License)
cranDESCs$License <- ifelse(license_info$is_standardizable,
license_info$standardization, NA)
path <- sprintf('%s%s',loc,cranDESCs$Path)
cranDESCs[, MD5sum := sapply(Path, md5sum)]
cranDESCs[, Path := NULL]
desc <- as.matrix(cranDESCs)
for (i in seq_len(nrow(desc))) {
#browser()
desci <- desc[i, !(is.na(desc[i,]) | (desc[i,] == "")), drop = FALSE]
write.dcf(desci, file = out)
# if (nzchar(path[i]))
#   cat("Path: ", path[i], "\n", sep = "", file = out)
cat("\n", file = out)
write.dcf(desci, file = outgz)
# if (nzchar(path[i]))
#   cat("Path: ", path[i], "\n", sep = "", file = outgz)
cat("\n", file = outgz)
}
close(out)
close(outgz)
cranDESCs
DESCs <- repo_descriptions(repo)
source('~/Projects/repoR/R/loadCRAN.R')
out <- file(sprintf('%s/%s',contrib.url(repo), "PACKAGES"), "wt")
outgz <- gzfile(sprintf('%s/%s',contrib.url(repo), "PACKAGES.gz"), "wt")
DESCs <- repo_descriptions(repo)
cranDESCs <- DESCs[,mget(.cranium[['package_fields']], ifnotfound = NA)]
cranDESCs
cranDESCs <- cranDESCs[,if(.N > 1) rbind(.SD,.SD[is_max_ver(Version)]) else .SD,
by = Package]
# Define the newest as the
cranDESCs[,IsNewest := (.N == frank(ifelse(is_max_ver(Version), 1, 0),
ties.method = 'first')),
by = Package]
cranDESCs[,IsHardLink := !is_shortest_string(Path),
by = .(Package, Version)]
cranDESCs <- cranDESCs[(!IsHardLink)]
cranDESCs[(!IsNewest), Package := interaction(Package, Version, sep = '_')]
cranDESCs[(!IsNewest), HardLinkLocation := hardlink_name(Path, Version)]
# in order to deal with download.packages,
# make hard links to the resulting packages
# that are created by it's frankenstein string op
Linkable <- cranDESCs[(!IsNewest & !file.exists(HardLinkLocation))]
if(nrow(Linkable) > 0) Linkable[,Map(file.link, Path, HardLinkLocation)]
# Clean Up before conversion to matrix
cranDESCs[,IsNewest := NULL]
cranDESCs[,HardLinkLocation := NULL]
cranDESCs[,IsHardLink := NULL]
license_info <- tools:::analyze_licenses(cranDESCs$License)
cranDESCs$License <- ifelse(license_info$is_standardizable,
license_info$standardization, NA)
path <- sprintf('%s%s',loc,cranDESCs$Path)
cranDESCs[, MD5sum := sapply(Path, md5sum)]
cranDESCs[, Path := NULL]
desc <- as.matrix(cranDESCs)
source('~/Projects/repoR/R/loadCRAN.R')
pkgs_available('CRAN_breeze/')
pkgs_available('CRAN_breeze/')
pkgs_available('CRAN_breeze/')
install_package_to_repo('tidyverse')
install_package_to_repo <- function(pkg,
repos = getOption('repos'),
destdir = get_repo_location(),
type = 'source') {
utils::download.packages(pkg,
destdir = destdir,
repos = repos,
type = type)
write_modpac(repos, get_repo_location())
}
install_package_to_repo('tidyverse')
get_repo_location()
install_package_to_repo <- function(pkg,
repos = getOption('repos'),
destdir = get_repo_location(),
www = get_visible_location(),
type = 'source') {
utils::download.packages(pkg,
destdir = destdir,
repos = contrib.url(repos, type),
type = type)
write_modpac(repos,www)
}
get_repo_location()
install_package_to_repo('tidyverse')
getOption('repos')
install_package_to_repo <- function(pkg,
repos = getOption('repos'),
destdir = get_repo_location(),
www = get_visible_location(),
type = 'source') {
utils::download.packages(pkg,
destdir = contrib.url(destdir),
repos = repos,
type = type)
write_modpac(repos,www)
}
install_package_to_repo('tidyverse')
library(pinnacle.API)
SetCredentials()
devtools::install_github('marcoblume/pinnacle.API')
SetCredentials()
showOddsDF()
showOddsDF(15)
z <- showOddsDF(15)
library(tidyverse)
z <- data_frame(z)
z <- as_data_frame(z)
z
z
z$periods.moneyline.home
z$periods.moneyline.home
z %>% select(league.events.home, league.events.away, periods.moneyline.home)
showOddsDF(15) %>% select(league.events.home, league.events.away, periods.moneyline.home)
showOddsDF(15) %>% select(league.events.home, league.events.away, periods.moneyline.home)
showOddsDF(15) %>% select(league.events.home, league.events.away, periods.moneyline.home)
showOddsDF(15) %>% select(league.events.home, league.events.away, periods.moneyline.home)
showOddsDF(15) %>% select(league.events.home, league.events.away, periods.moneyline.home, periods.spread.hdp)
showOddsDF(15) %>% select(league.events.home, league.events.away, periods.moneyline.home)
source('~/Projects/repoR/R/loadCRAN.R')
pkgs_available(repo = 'CRAN_breeze/')
install_package_to_repo('tidyverse')
getwd()
source('~/Projects/repoR/R/loadCRAN.R')
install_package_to_repo('tidyverse')
repo
loc
source('~/Projects/repoR/R/loadCRAN.R')
source('~/Projects/repoR/R/loadCRAN.R')
install_package_to_repo('tidyverse')
pkgs_available(repo = 'CRAN_breeze/')
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
.cranium[['repo']] <- NULL
.cranium[['repo']]
.cranium[['repor']]
rm(.cranium)
sapply(ls(),rm)
sapply(ls(),print)
?rm
rm(list = ls())
ls()
devtools::load_all()
devtools::document()
rm(list = ls())
devtools::load_all()
devtools::document()
rm(list = ls())
devtools::document()
rm(list = ls())
devtools::load_all()
devtools::document()
dir.create('test')
file.create('test/test')
file.rename('test','est')
initialize_repo <- function(repo, overwrite = FALSE) {
if(dir.exists(location) & overwrite)
stop(sprintf('%s already exists.', repo))
if(dir.exists(location) & overwrite) {
message('Overwriting repository...')
message('(In case this was a horrible error, a backup of this repo has been stored in tempdir())')
message('This backup will be destroyed as soon as this R session ends')
file.rename(repo, tempdir())
return(NULL)
}
dir.create(contrib.url(repo,type = 'source'),recursive = TRUE)
}
initialize_repo('testrepo')
initialize_repo <- function(repo, overwrite = FALSE) {
if(dir.exists(repo) & overwrite)
stop(sprintf('%s already exists.', repo))
if(dir.exists(repo) & overwrite) {
message('Overwriting repository...')
message('(In case this was a horrible error, a backup of this repo has been stored in tempdir())')
message('This backup will be destroyed as soon as this R session ends')
file.rename(repo, tempdir())
return(NULL)
}
dir.create(contrib.url(repo,type = 'source'),recursive = TRUE)
}
initialize_repo('testrepo')
initialize_repo('testrepo')
initialize_repo('testrepo', overwrite = TRUE)
initialize_repo <- function(repo, overwrite = FALSE) {
if(dir.exists(repo) & !overwrite)
stop(sprintf('%s already exists.', repo))
if(dir.exists(repo) & overwrite) {
message('Overwriting repository...')
message('(In case this was a horrible error, a backup of this repo has been stored in tempdir())')
message('This backup will be destroyed as soon as this R session ends')
file.rename(repo, tempdir())
return(NULL)
}
dir.create(contrib.url(repo,type = 'source'),recursive = TRUE)
}
initialize_repo('testrepo', overwrite = TRUE)
initialize_repo <- function(repo, overwrite = FALSE) {
if(dir.exists(repo) & !overwrite)
stop(sprintf('%s already exists.', repo))
if(dir.exists(repo) & overwrite) {
message('Overwriting repository...')
message('(In case this was a horrible error, a backup of this repo has been stored in tempdir())')
message('This backup will be destroyed as soon as this R session ends')
file.copy(repo, tempdir())
unlink(repo, recursive = TRUE)
return(NULL)
}
dir.create(contrib.url(repo,type = 'source'),recursive = TRUE)
}
initialize_repo('testrepo', overwrite = TRUE)
ls(tempdir())
dir(tempdir())
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
dir.create('R')
devtools::load_all()
devtools::document()
